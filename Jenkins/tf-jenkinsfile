pipeline {
    agent any
    stages {
        stage('checkout SCM') {
            steps {
                script {
                    // Checkout the repository from GitHub
                    checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/thangacodes/terraform_usecases.git']]
                    ]
                }
            }
        }
        stage('navigate_to_tf_script_path') {
            steps {
                script {
                    // Navigate to the Terraform script path
                    dir('terraform_usecases/aws_terraform/conditional_based_ec2_creation') {
                        echo "Navigating to the Terraform script path: terraform_usecases/aws_terraform/conditional_based_ec2_creation"
                    }
                }
            }
        }
        stage('terraform init') {
            steps {
                script {
                    // User confirmation before running Terraform init
                    def initConfirmation = input(
                        message: 'Do you want to run terraform init?',
                        parameters: [
                            choice(name: 'Run Init', choices: ['Yes', 'No'], description: 'Choose Yes to run terraform init or No to skip')
                        ]
                    )
                    if (initConfirmation == 'Yes') {
                        sh """
                        echo 'Initializing Terraform...'
                        ${env.TFINIT}
                        """
                    } else {
                        echo 'Skipping terraform init.'
                    }
                }
            }
        }
        stage('terraform validate') {
            steps {
                script {
                    // User confirmation before running Terraform validate
                    def validateConfirmation = input(
                        message: 'Do you want to run terraform validate?',
                        parameters: [
                            choice(name: 'Run Validate', choices: ['Yes', 'No'], description: 'Choose Yes to run terraform validate or No to skip')
                        ]
                    )
                    if (validateConfirmation == 'Yes') {
                        sh """
                        echo 'Validating Terraform configuration...'
                        ${env.TFVALIDATE}
                        """
                    } else {
                        echo 'Skipping terraform validate.'
                    }
                }
            }
        }
        stage('terraform plan') {
            steps {
                script {
                    // User confirmation before running Terraform plan
                    def planConfirmation = input(
                        message: 'Do you want to run terraform plan?',
                        parameters: [
                            choice(name: 'Run Plan', choices: ['Yes', 'No'], description: 'Choose Yes to run terraform plan or No to skip')
                        ]
                    )
                    if (planConfirmation == 'Yes') {
                        sh """
                        echo 'Generating Terraform plan...'
                        ${env.TFPLAN}
                        """
                    } else {
                        echo 'Skipping terraform plan.'
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Please check the console logs for errors."
        }
    }
}
